NBT Structure Maker API is an API designed more for advanced Minecraft players who have more experiences with nbt files and datapacks. 

In Minecraft, you can place blocks to build all kinds of stuff. With a special block called a Structure Block, you can save your builds into an nbt file (.nbt). Furthermore, you can load up other people's nbt files in game to spawn their builds! And for very advanced players, they may make datapacks that changes the game's behavior and part of that is using nbt files to make their creations be spawned in automatically as the world is being generated.

Thus, the purposed of this site is to allow a quick way for someone to make nbt files when they don't have access to Minecraft.

The API for the site handles sending/recieving objects that will be converted to nbt files on the server and it also allows the user to see and load up any saved nbt file on the server. Furthermore, user can download the nbt file and spawn the build in the game!

So far, things are looking good for the app. I did have issues with a strange bug where the grid of blocks with change size randomly when saving and loading from the same nbt file. Turns out I was not setting the size entry properly in my post request lol. The nbt parsing was quite a handful but wasn't too bad to get through and works great in the end. getting the downloading to work was a massive pain as window.open(blobUrl) does not let me change the file name downloaded. And when I switched to using an invisible link element that lets me download the blob of data as a file, my pop-up blocker was redirecting me to apage that says "page not found" instead of letting me download. It took me a while to figure out it was the pop-up blocker killing me! Then I found out the nbt package automatically unzips the nbt files and Minecraft will not read it if unzipped. So I had to reverse engineer the nbt package on their GitHub source and figure out how to rezip the nbt data when sent to client so Minecraft will accept it. 

As for what can be better, absolutely everything lmao. I worked really hard on this app to get it where it is now but it is no where close to perfect. Things that still need to be done:

- Allow custom file names when saving (might be better to do for project 2 as then I can tie files to users and people can name their own files whatever without clashing with other people's files)

- Allow building in the Y dimension so users can make 3D builds.

- Allow changing of size so people could make 48x48 builds.

- Perhaps find an API to have full list of Minecraft blocks and allow for greater selection? Would also mean I need to support block properties (like blocks facing certain directions) but that's VERY difficult to work with in nbt files.

- Add a way for users to delete files maybe? Would mean we need to tie the nbt structures to be per users so people don't destroy other's work. This can be a perfect project 2 change.


As for what is above and beyond, I think the block drawing feature is really cool and the ability to see all the avaliable nbt files saved on the server is nice. A ton of work was put into the grid on client side and the nbt reading/parsing on serverside. Furthermore, by having the nbt files stored as actual files, they persist between server restarts so it is kind of like an actual database instead of the temporary storage we were expected to do. Quite a bit of work was put into organizing good parts of the code to make it more legible for myself. Overall, just the interaction of the local data with the server and the client took up the bulk of my time but feels solid now. Just the extra features are needed to make it much more useful. And of course, sending the actual nbt file to the user and letting them download it. That's hard and really above and beyond!

----------------------------------------------
API endpoints

 GET
  /getNBTFile 
    - ?uuid=___ 
    - gets the content of the specified file from the server.
  /getFileList 
    - gets the UUID of all nbt files saved on server.
  /getDownloadableNBTFile
    - returns the entire nbt file as a compressed buffer of binary data.

 HEAD
  /getNBTFile 
    - ?uuid=___ 
    - gets the size of the specified file from the server as a header response.
  /getFileList 
    - gets the number of nbt files on the server as a header response. 
  /getDownloadableNBTFile
    - returns the size of the compressed binary buffer in bytes.

 POST
  /saveNBT 
    - sends the user's grid info to be saved to an nbt file on server.

----------------------------------------------
Credit/sources

nbt package: https://www.npmjs.com/package/nbt
nbt package docs: http://sjmulder.github.io/nbt-js/

How to tell if mouse button is still being clicked or held down: https://stackoverflow.com/a/15098620

Make images be toggle for radio buttons: https://stackoverflow.com/a/17541916 

Make elements unabled to be dragged: https://stackoverflow.com/a/4211930

Helper method to turn 1D arrays into 2D arrays: https://stackoverflow.com/a/44946686

How to open all files in a directory: https://stackoverflow.com/a/10049704

Learned Object.assign from https://stackoverflow.com/a/30871719

Download blobs of data with a new filename set: https://stackoverflow.com/a/48968694

How to send full file to users: https://stackoverflow.com/a/21578563

The special MIME type for arbitrary binary data: https://stackoverflow.com/a/6783972