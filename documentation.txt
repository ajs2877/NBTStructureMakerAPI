NBT Structure Maker API is an API designed more for advanced Minecraft players who have more experiences with nbt files and datapacks. 

In Minecraft, you can place blocks to build all kinds of stuff. With a special block called a Structure Block, you can save your builds into an nbt file (.nbt). Furthermore, you can load up other people's nbt files in game to spawn their builds! And for very advanced players, they may make datapacks that changes the game's behavior and part of that is using nbt files to make their creations be spawned in automatically as the world is being generated.

Thus, the purposed of this site is to allow a quick way for someone to make nbt files when they don't have access to Minecraft.

The API for the site handles sending/recieving objects that will be converted to nbt files on the server and it also allows the user to see and load up any saved nbt file on the server. Furthermore, user can download the nbt file and spawn the build in the game! Since the server uses MonogDB along with user sessions, the nbt data is per user and now users can delete their file safely without wrecking someone else's work.

So far, things are looking good for the app. I did spend a ton of time porting project 1's code to work with Express and redoing the functionalities again from scratch. Specifically, the download, load, save, and selecting files needed to be redone for Express. The biggest and most time consuming hurdle I had was getting downloading to work. Apparently, my Express is setup in such a way that no matter what I do, it always sends the response from the server to the client as a string. I can change the Content-type but and did every solutions I could find online and on stackexchange but I cnanot get it to send my data as binary like I needed. It took so long to figure out that the downloading data was broken and the reason was that Express is doing String(data) somewhere which is a lossy conversion when done on binary data. So I grabbed a guy's code online for converting binary to Base64 encodec string and back. By sending an encoded string and doing the decoding myself, I was able to keep all my data intact despite this strange Express issue. I did make sure to comment in that I am only doing the encoding/decoding as a workaround for a bug but we all know that sadly, "there's nothing more permanent than a temporary solution". 

As for monetization, I could do a simple $1 buy-in to use the site for an unlimited amount of time. As the site gets better over time and far more useful, the price can be increased to reflect the increase in quality. By having it cheap at start, it would help people feel like they should jump in and old-time users feeling proud for supporting me in the beginning.

As for what can be better, absolutely everything lmao. I worked really hard on this app to get it where it is now but it is no where close to perfect. Things that still need to be done:

- Stylize the app much better

- Allow building in the Y dimension so users can make 3D builds.

- Allow changing of size so people could make 48x48 builds.

- Perhaps find an API to have full list of Minecraft blocks and allow for greater selection? Would also mean I need to support block properties (like blocks facing certain directions) but that's VERY difficult to work with in nbt files.


As for what is above and beyond, well, I think the way I handle all my endpoints and added a few extra functionalities that this project didn't have before really helps! Though debugging was really the bulk of my work this time around and nearly wrecked me. I had to start making tradeoffs between my work on this project and my other projects for other classes if I want to get something workable for all my classes.

----------------------------------------------
API endpoints

 GET
  /getToken
    - gets session token
  /logout
    - destroys the user session and logs user out.
  /main
    - The main page of the app to make nbt files. Will redirect to login page if not logged in.
  /getNBTFile 
    - ?_csrf=___&nbt_file=___ 
    - gets the content of the specified file from the server.
  /getFileList 
    - ?_csrf=___ 
    - gets the UUID of all nbt files saved on server.

 DELETE
  /deleteFile
    - ?_csrf=___ 
    - Will delete the file from the server if given password of filament34F@

 POST
  /signup
    - Create a new account for the user and log them in.
  /login
    - Log in the user.
  /saveNBT 
    - ?_csrf=___ 
    - sends the user's grid info to be saved to an nbt file on server.
  /downloadNBTFile
    - ?_csrf=___ 
    - sends the user's current grid info to be turned into an nbt file on server and sent back to be downloaded on cleint as a file.

----------------------------------------------
Credit/sources

nbt package: https://www.npmjs.com/package/nbt
nbt package docs: http://sjmulder.github.io/nbt-js/

Encode/Decode binary to base64 string and back: https://stackoverflow.com/a/57111228

How to tell if mouse button is still being clicked or held down: https://stackoverflow.com/a/15098620

Make images be toggle for radio buttons: https://stackoverflow.com/a/17541916 

Make elements unabled to be dragged: https://stackoverflow.com/a/4211930

Helper method to turn 1D arrays into 2D arrays: https://stackoverflow.com/a/44946686

How to open all files in a directory: https://stackoverflow.com/a/10049704

Learned Object.assign from https://stackoverflow.com/a/30871719

Download blobs of data with a new filename set: https://stackoverflow.com/a/48968694

How to send full file to users: https://stackoverflow.com/a/21578563

The special MIME type for arbitrary binary data: https://stackoverflow.com/a/6783972